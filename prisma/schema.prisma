// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  password      String
  avatar        String?
  role          Role      @default(MEMBER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relationships
  workspaces    WorkspaceMember[]
  createdTasks  Task[]            @relation("TaskCreator")
  assignedTasks Task[]            @relation("TaskAssignee")
  comments      Comment[]
  timeEntries   TimeEntry[]
  
  @@map("users")
}

model Workspace {
  id          String   @id @default(cuid())
  name        String
  description String?
  color       String   @default("#7B68EE")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  members  WorkspaceMember[]
  projects Project[]
  
  @@map("workspaces")
}

model WorkspaceMember {
  id          String        @id @default(cuid())
  role        WorkspaceRole @default(MEMBER)
  joinedAt    DateTime      @default(now())

  // Foreign Keys
  userId      String
  workspaceId String

  // Relationships
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([userId, workspaceId])
  @@map("workspace_members")
}

model Project {
  id          String        @id @default(cuid())
  name        String
  description String?
  color       String        @default("#7B68EE")
  status      ProjectStatus @default(ACTIVE)
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Foreign Keys
  workspaceId String

  // Relationships
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  tasks     Task[]
  
  @@map("projects")
}

model Task {
  id          String     @id @default(cuid())
  title       String
  description String?
  status      TaskStatus @default(TODO)
  priority    Priority   @default(MEDIUM)
  points      Int?
  dueDate     DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Foreign Keys
  projectId   String
  createdById String
  assigneeId  String?

  // Relationships
  project     Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdBy   User        @relation("TaskCreator", fields: [createdById], references: [id])
  assignee    User?       @relation("TaskAssignee", fields: [assigneeId], references: [id])
  comments    Comment[]
  timeEntries TimeEntry[]
  tags        TaskTag[]
  
  @@map("tasks")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Foreign Keys
  taskId   String
  authorId String

  // Relationships
  task   Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  author User @relation(fields: [authorId], references: [id])
  
  @@map("comments")
}

model TimeEntry {
  id          String    @id @default(cuid())
  description String?
  duration    Int       // in minutes
  startTime   DateTime
  endTime     DateTime?
  createdAt   DateTime  @default(now())

  // Foreign Keys
  taskId String
  userId String

  // Relationships
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id])
  
  @@map("time_entries")
}

model Tag {
  id    String @id @default(cuid())
  name  String @unique
  color String @default("#7B68EE")

  // Relationships
  tasks TaskTag[]
  
  @@map("tags")
}

model TaskTag {
  id String @id @default(cuid())

  // Foreign Keys
  taskId String
  tagId  String

  // Relationships
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  tag  Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([taskId, tagId])
  @@map("task_tags")
}

// Enums
enum Role {
  ADMIN
  MEMBER
}

enum WorkspaceRole {
  OWNER
  ADMIN
  MEMBER
  GUEST
}

enum ProjectStatus {
  ACTIVE
  COMPLETED
  ARCHIVED
  ON_HOLD
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  IN_REVIEW
  DONE
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
} 